// This file uses RGBA literal values responsibly
// This file uses off-pattern indedentation to be more readible

// sass-lint:disable no-color-literals, no-color-keywords, indentation, quotes

// ------------------------------------
//  Flat
// ------------------------------------

// Similar to shadow medium but wihtout the bottom depth. Useful for popovers
// that drop UP rather than DOWN.
@mixin euiBottomShadowFlat($color: $euiShadowColor, $opacity: .1) {
  box-shadow:
    0 0 12px 0 rgba($color, $opacity),
    0 0 4px 0 rgba($color, $opacity),
    0 0 2px 0 rgba($color, $opacity);
}

// ------------------------------------
//  Slight
// ------------------------------------

@mixin euiSlightShadow($color: $euiShadowColor, $opacity: .25) {
  box-shadow:
    0 1px 2px 0 rgba($color, $opacity),
    0 2px 4px 0 rgba($color, $opacity);
}

@mixin euiSlightShadowActive($color: $euiShadowColor, $opacity: .3) {
  @include euiSlightShadowHover($color, $opacity);
}

@mixin euiSlightShadowHover($color: $euiShadowColor, $opacity: .3) {
  box-shadow:
    0 2px 2px 0 rgba($color, $opacity),
    0 3px 4px 0 rgba($color, $opacity),
    0 5px 8px 0 rgba($color, $opacity),
    0 9px 16px 0 rgba($color, $opacity);
}

// ------------------------------------
//  Small
// ------------------------------------

@mixin euiBottomShadowSmall($color: $euiShadowColor, $opacity: .15) {
  box-shadow:
    0 1px 2px 0 rgba($color, $opacity),
    0 2px 4px 0 rgba($color, $opacity),
    0 4px 8px 0 rgba($color, $opacity),
    0 8px 16px 0 rgba($color, $opacity);
}

// ------------------------------------
//  Medium
// ------------------------------------

@mixin euiBottomShadowMedium($color: $euiShadowColor, $opacity: .175) {
  box-shadow:
    0 1px 2px 0 rgba($color, $opacity),
    0 2px 4px 0 rgba($color, $opacity),
    0 4px 8px 0 rgba($color, $opacity),
    0 8px 16px 0 rgba($color, $opacity),
    0 16px 32px 0 rgba($color, $opacity);
}

// ------------------------------------
//  Standard
// ------------------------------------

// adjustBorder allows the border color to match the drop shadow better so that there's better
// distinction between element bounds and the shadow (crisper borders)
@mixin euiBottomShadow($color: $euiShadowColorLarge, $opacity: .1, $adjustBorders: false) {
  box-shadow:
    0 1px 2px 0 rgba($color, $opacity),
    0 2px 4px 0 rgba($color, $opacity),
    0 4px 8px 0 rgba($color, $opacity),
    0 8px 16px 0 rgba($color, $opacity),
    0 16px 32px 0 rgba($color, $opacity),
    0 32px 64px 0 rgba($color, $opacity);

  // Never adjust borders if the border color is already on the dark side (dark theme)
  @if ($adjustBorders and not (lightness($euiBorderColor) < 50)) {
    border-color: tint($color, 75%);
    border-top-color: tint($color, 80%);
    border-bottom-color: tint($color, 55%);
  }
}

// ------------------------------------
//  Large
// ------------------------------------

@mixin euiBottomShadowLarge(
  $color: $euiShadowColorLarge,
  $opacity: .1,
  $adjustBorders: false,
  $reverse: false
) {
  @if ($reverse) {
    box-shadow:
      0 -40px 64px 0 rgba($color, $opacity),
      0 -24px 32px 0 rgba($color, $opacity),
      0 -16px 16px 0 rgba($color, $opacity),
      0 -8px 8px 0 rgba($color, $opacity);
  } @else {
    box-shadow:
      0 40px 64px 0 rgba($color, $opacity),
      0 24px 32px 0 rgba($color, $opacity),
      0 16px 16px 0 rgba($color, $opacity),
      0 8px 8px 0 rgba($color, $opacity),
      0 4px 4px 0 rgba($color, $opacity),
      0 2px 2px 0 rgba($color, $opacity);
  }

  // Never adjust borders if the border color is already on the dark side (dark theme)
  @if ($adjustBorders and not (lightness($euiBorderColor) < 50)) {
    border-color: tint($color, 70%);
    border-top-color: tint($color, 85%);
    border-bottom-color: tint($color, 55%);
  }
}

// ------------------------------------
//  Overflow
// ------------------------------------

@mixin euiOverflowShadow($direction: 'y') {
  $hideHeight: $euiScrollBarCorner * 1.25;
  $gradient: transparentize(red, .9) 0%,
             transparentize(red, 0) $hideHeight,
             transparentize(red, 0) calc(100% - #{$hideHeight}),
             transparentize(red, .9) 100%;

  @if ($direction == 'y') {
    mask-image: linear-gradient(to bottom, #{$gradient});
  } @else if ($direction == 'x') {
    mask-image: linear-gradient(to right, #{$gradient});
  } @else {
    @warn "euiOverflowShadow() expects direction to be 'y' or 'x' but got '#{$direction}'";
  }
}
