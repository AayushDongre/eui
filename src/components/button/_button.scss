@import '../loading/mixins';

// This file has lots of modifiers and is somewhat nesty by nature
//sass-lint:disable nesting-depth

// Our base button
.euiButton {
  @include euiButton;
  @include euiFontSize;

  border-radius: $euiBorderRadius;
  min-width: $euiButtonMinWidth;

  .euiButton__content {
    @include euiButtonContent;

    padding: 0 $euiSizeM;
  }

  .euiButton__text {
    text-overflow: ellipsis;
    overflow: hidden;
  }

  &.euiButton--small {
    @include euiFontSizeS;
    border-radius: ($euiBorderRadius * .75);
    height: $euiButtonHeightSmall;
    line-height: $euiButtonHeightSmall; // prevents descenders from getting cut off
  }

  &.euiButton--iconRight {
    .euiButton__content {
      @include euiButtonContent($isReverse: true);
    }
  }

  // &:hover,
  // &:active {
  //   @include euiSlightShadowHover;
  // }

  &:enabled {
    &:hover,
    &:focus {
      background-color: transparentize($euiColorPrimary, .9);
    }
  }

  &:disabled {
    background-color: transparentize($euiButtonColorDisabled, .75);
    color: $euiButtonColorDisabled;
    border-color: $euiButtonColorDisabled;
    pointer-events: none;

    .euiButton__content {
      pointer-events: auto;
      cursor: not-allowed;
    }

    &.euiButton--fill {
      background-color: $euiButtonColorDisabled;
      border-color: $euiButtonColorDisabled;

      &:hover,
      &:focus {
        background-color: $euiButtonColorDisabled;
        border-color: $euiButtonColorDisabled;
      }
    }

    &:hover,
    &:focus {
      text-decoration: none;
    }
  }
}

// Modifier naming and colors.
$buttonTypes: (
  primary: $euiColorPrimary,
  secondary: $euiColorSecondary,
  warning: $euiColorWarning,
  danger: $euiColorDanger,
  ghost: $euiColorGhost, // Ghost is special, and does not care about theming.
  text: $euiColorDarkShade, // Reserved for special use cases
);

// Create button modifiers based upon the map.
@each $name, $color in $buttonTypes {
  .euiButton--#{$name} {

    @if ($name == 'ghost') {
      // Ghost is unique and ALWAYS sits against a dark background.
      color: $color;
    } @else if ($name == 'text') {
      // The default color is lighter than the normal text color, make the it the text color
      color: $euiTextColor;
    } @else {
      // Other colors need to check their contrast against the page background color.
      color: makeHighContrastColor($color, $euiColorEmptyShade);
    }

    background-color: transparentize($color, .85);

    &.euiButton--fill {
      background-color: $color;
      border-color: $color;

      // The function makes that hexes safe for theming
      $fillTextColor: chooseLightOrDarkText($color, $euiColorGhost, $euiColorInk);

      color: $fillTextColor;

      &:enabled {
        &:hover,
        &:focus {
          background-color: darken($color, 5%);
          border-color: darken($color, 5%);
        }
      }

      &:disabled .euiButton__spinner {
        border-color: euiLoadingSpinnerBorderColors(transparentize($fillTextColor, .3));
      }
    }

    &:enabled {
      &:hover,
      &:focus {
        background-color: transparentize($color, .7);

        @if ($name == 'disabled') {
          cursor: not-allowed;
        }
      }
    }

    &:disabled,
    &:disabled:hover,
    &:disabled:focus {
      @if ($name == 'ghost') {
        @include euiSlightShadow($euiColorInk);
      }
    }
  }
}

.euiButton--fullWidth {
  display: block;
  width: 100%;
}
